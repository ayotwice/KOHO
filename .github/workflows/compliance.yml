name: PCI-DSS Compliance Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  CONFTEST_VERSION: '0.46.0'
  AWS_REGION: 'us-west-2'

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/aws
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform/aws

    - name: Terraform Plan
      run: |
        terraform plan -out=tfplan.binary
        terraform show -json tfplan.binary > tfplan.json
      working-directory: ./terraform/aws
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: ./terraform/aws/tfplan.json
        retention-days: 5

  policy-validation:
    name: OPA Policy Validation
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan
        path: ./terraform/aws/

    - name: Install Conftest
      run: |
        wget https://github.com/open-policy-agent/conftest/releases/download/v${{ env.CONFTEST_VERSION }}/conftest_${{ env.CONFTEST_VERSION }}_Linux_x86_64.tar.gz
        tar xzf conftest_${{ env.CONFTEST_VERSION }}_Linux_x86_64.tar.gz
        sudo mv conftest /usr/local/bin
        conftest --version

    - name: Run PCI-DSS Compliance Tests
      run: |
        echo "Running PCI-DSS compliance validation..."
        conftest test --policy policies/opa/main.rego terraform/aws/tfplan.json --output=table

    - name: Test with Compliant Fixture
      run: |
        echo "Testing with compliant fixture..."
        conftest test --policy policies/opa/main.rego tests/fixtures/compliant_plan.json --output=table

    - name: Test with Non-Compliant Fixture
      run: |
        echo "Testing with non-compliant fixture (should fail)..."
        ! conftest test --policy policies/opa/main.rego tests/fixtures/non_compliant_plan.json --output=table

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: './terraform'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [terraform-validate, policy-validation]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan
        path: ./terraform/aws/
      continue-on-error: true

    - name: Install Conftest
      run: |
        wget https://github.com/open-policy-agent/conftest/releases/download/v${{ env.CONFTEST_VERSION }}/conftest_${{ env.CONFTEST_VERSION }}_Linux_x86_64.tar.gz
        tar xzf conftest_${{ env.CONFTEST_VERSION }}_Linux_x86_64.tar.gz
        sudo mv conftest /usr/local/bin

    - name: Generate Compliance Report
      run: |
        echo "# PCI-DSS Compliance Report" > compliance-report.md
        echo "" >> compliance-report.md
        echo "Generated on: $(date)" >> compliance-report.md
        echo "Commit: ${{ github.sha }}" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Implemented Controls" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "- **1.1, 1.2, 1.3** - Network Security (Firewalls, Segmentation)" >> compliance-report.md
        echo "- **2.2** - System Configuration Standards" >> compliance-report.md
        echo "- **3.4, 3.6** - Data Encryption (At-rest, Key Management)" >> compliance-report.md
        echo "- **4.1** - Encryption in Transit" >> compliance-report.md
        echo "- **7.1, 7.2** - Access Control (IAM, RBAC)" >> compliance-report.md
        echo "- **10.1, 10.2** - Logging and Monitoring" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Policy Validation Results" >> compliance-report.md
        echo "" >> compliance-report.md
        
        if [ -f "terraform/aws/tfplan.json" ]; then
          echo "### PCI-DSS Compliance Results" >> compliance-report.md
          conftest test --policy policies/opa/main.rego terraform/aws/tfplan.json --output table >> compliance-report.md 2>&1 || true
        else
          echo "Terraform plan not available for validation" >> compliance-report.md
        fi

    - name: Upload Compliance Report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md
        retention-days: 30

    - name: Comment PR with Compliance Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('compliance-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [terraform-validate, policy-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/aws
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform/aws
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Output Infrastructure Details
      run: terraform output -json > infrastructure-outputs.json
      working-directory: ./terraform/aws
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Upload Infrastructure Outputs
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-outputs
        path: ./terraform/aws/infrastructure-outputs.json
        retention-days: 30